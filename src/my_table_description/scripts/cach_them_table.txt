H∆∞·ªõng d·∫´n chi ti·∫øt v·ªõi t·∫•t c·∫£ l·ªánh ƒë√£ d√πng
D∆∞·ªõi ƒë√¢y l√† chu·ªói c√°c b∆∞·ªõc ‚Äì k√®m c√°c l·ªánh c·ª• th·ªÉ ‚Äì ƒë·ªÉ b·∫°n:

T·∫°o package my_table_description

Th√™m mesh ‚Äútable.stl‚Äù

Vi·∫øt script move_sequence_rrt.py (add b√†n, t√¥ x√°m, th√™m 19 h·ªôp, ch·∫°y RRT)

Build & ch·∫°y tr√™n robot th·∫≠t ho·∫∑c m√¥ ph·ªèng

Ghi nh·∫≠n v√† kh·∫Øc ph·ª•c m·ªçi l·ªói ƒë√£ g·∫∑p

1. Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng ROS
bash
# 1.1. Source ROS Noetic
source /opt/ros/noetic/setup.bash

# 1.2. Chu·∫©n b·ªã workspace n·∫øu ch∆∞a c√≥
mkdir -p ~/catkin_ws/src
cd ~/catkin_ws
catkin_make
2. T·∫°o package ch·ª©a mesh v√† scripts
bash
cd ~/catkin_ws/src

# 2.1. T·∫°o package m·ªõi ph·ª• thu·ªôc c√°c g√≥i c·∫ßn thi·∫øt
catkin_create_pkg my_table_description \
  rospy \
  moveit_commander \
  moveit_msgs \
  geometry_msgs \
  std_msgs \
  tf \
  rospkg

# 2.2. T·∫°o th∆∞ m·ª•c ch·ª©a mesh v√† script
cd my_table_description
mkdir -p meshes scripts
‚Ä¢ Copy file table.stl v√†o meshes/ ‚Ä¢ T·∫•t c·∫£ Python script ƒë·ªÉ v√†o scripts/

3. Vi·∫øt script move_sequence_rrt.py
bash
cd ~/catkin_ws/src/my_table_description/scripts
rm -f move_sequence_rrt.py

cat << 'EOF' > move_sequence_rrt.py
#!/usr/bin/env python3
"""
Add table mesh (gray), 19 boxes, then execute RRT motion on arm.
"""
import sys, os, rospy, moveit_commander
from moveit_commander import PlanningSceneInterface, RobotCommander, MoveGroupCommander
from geometry_msgs.msg import PoseStamped
from std_msgs.msg import ColorRGBA
from moveit_msgs.msg import PlanningScene, ObjectColor
from tf.transformations import quaternion_from_euler
from rospkg import RosPack

def add_table(scene, frame_id, ns):
    # 1) ƒê∆∞·ªùng d·∫´n ƒë·∫øn mesh trong package
    pkg_path = RosPack().get_path("my_table_description")
    mesh_fp  = os.path.join(pkg_path, "meshes", "table.stl")

    # 2) Pose b√†n
    table = PoseStamped()
    table.header.frame_id = frame_id
    table.pose.position.x, table.pose.position.y, table.pose.position.z = -0.4, 2.20, 0.04
    table.pose.orientation.w = 1.0

    # 3) Scale mesh
    scale = (0.2, 0.2, 0.2)
    scene.add_mesh("table", table, mesh_fp, scale)
    rospy.loginfo("‚úÖ Added table mesh")

    # 4) T√¥ m√†u gray cho 'table' qua PlanningScene diff
    color = ObjectColor()
    color.id = "table"
    color.color = ColorRGBA(0.5, 0.5, 0.5, 1.0)
    ps = PlanningScene(is_diff=True)
    ps.object_colors.append(color)

    # L∆∞u √Ω: ph·∫£i publish l√™n namespace ƒë√∫ng
    topic = f"{ns}/planning_scene"
    pub = rospy.Publisher(topic, PlanningScene, queue_size=1)
    rospy.sleep(0.5)  # ch·ªù k·∫øt n·ªëi
    pub.publish(ps)
    rospy.loginfo(f"üé® Table colored gray on '{topic}'")

def add_box(scene, name, size, pos, frame_id):
    box = PoseStamped()
    box.header.frame_id = frame_id
    box.pose.position.x, box.pose.position.y, box.pose.position.z = pos
    box.pose.orientation.w = 1.0
    scene.add_box(name, box, size=size)
    rospy.loginfo(f"‚úÖ Added box '{name}' at {pos}")

def main():
    rospy.init_node("move_sequence_rrt", anonymous=True)
    moveit_commander.roscpp_initialize(sys.argv)

    ns = "/dsr01m1013"
    robot = RobotCommander(robot_description=f"{ns}/robot_description", ns=ns)
    group = MoveGroupCommander("arm", robot_description=f"{ns}/robot_description", ns=ns)
    scene = PlanningSceneInterface(ns=ns, synchronous=True)
    rospy.sleep(1.0)

    frame = group.get_planning_frame()
    rospy.loginfo(f"Planning frame: {frame}")

    # A) Add table + gray color
    add_table(scene, frame, ns)

    # B) Add 19 boxes
    coords = [
      ( 0.11,-0.78,0.13),( 0.60,-0.34,0.73),(-0.86,-0.89,0.10),
      ( 0.66, 0.31,1.08),( 0.12,-0.79,0.45),(-0.84, 0.00,0.11),
      (-0.84, 0.00,0.41),(-0.68, 0.00,1.20),( 0.00, 0.94,0.12),
      (-0.92, 0.76,0.11),(-0.96, 0.79,0.43),(-0.70,-0.76,0.41),
      (-0.27, 0.72,0.54),( 0.00,-0.52,1.02),(-0.11, 0.76,1.09),
      ( 0.84, 0.51,0.12),( 0.72,-0.27,0.09),( 0.61, 0.10,0.52),
      ( 0.00, 0.09,1.67)
    ]
    for i, pos in enumerate(coords, start=1):
        add_box(scene, f"box{i}", (0.2,0.2,0.2), pos, frame)

    # C) Ch·ªù objects xu·∫•t hi·ªán
    expected = {f"box{i}" for i in range(1,20)} | {"table"}
    t0 = rospy.get_time()
    while rospy.get_time() - t0 < 5.0:
        if expected.issubset(set(scene.get_known_object_names())):
            rospy.loginfo("‚úÖ All objects are now in the scene")
            break
        rospy.sleep(0.1)

    # D) Thi·∫øt l·∫≠p RRT planner v√† ch·∫°y sequence
    group.set_goal_joint_tolerance(0.01)
    group.set_max_velocity_scaling_factor(0.2)
    group.set_max_acceleration_scaling_factor(0.2)
    group.set_planning_time(10.0)
    group.set_planner_id("RRTkConfigDefault")

    seq = [
      [0,0,0,0,0,0],
      [-2.805,0.619,1.374,-0.004,1.191,-3.252],
      [-3.850,0.619,1.374,-0.004,1.191,-3.252],
      [0,0,0,0,0,0]
    ]
    rospy.loginfo("üöÄ Executing RRT motion sequence")
    for idx, tgt in enumerate(seq, start=1):
        group.set_joint_value_target(tgt)
        plan = group.plan()
        if plan and plan[0]:
            rospy.loginfo(f"‚û°Ô∏è Step {idx}")
            group.execute(plan[1], wait=True)
            group.stop(); group.clear_pose_targets()
            rospy.sleep(1.0)
        else:
            rospy.logwarn(f"‚ö†Ô∏è Planning failed at step {idx}")
            break

    rospy.loginfo("‚úÖ Motion complete")
    moveit_commander.roscpp_shutdown()

if __name__ == "__main__":
    main()
EOF

# 3.1. Cho ph√©p th·ª±c thi
chmod +x move_sequence_rrt.py
4. Build v√† source l·∫°i
bash
cd ~/catkin_ws
catkin_make
source devel/setup.bash
5. Ch·∫°y th·ª≠ v√† kh·∫Øc ph·ª•c l·ªói
5.1. Kh·ªüi robot driver + controllers
bash
# n·∫øu robot th·∫≠t (use_fake_hardware:=false)
roslaunch dsr01m1013_bringup robot_bringup.launch sim:=false

# n·∫øu m√¥ ph·ªèng Gazebo
roslaunch dsr01m1013_bringup robot_bringup.launch sim:=true
5.2. Kh·ªüi MoveIt Planning + Execution
bash
roslaunch dsr01m1013_moveit_config moveit_planning_execution.launch sim:=false
L∆∞u √Ω: sim:=true ƒë·ªÉ ch·∫°y fake controllers

5.3. Ch·∫°y script
bash
rosrun my_table_description move_sequence_rrt.py
Ho·∫∑c:

bash
python3 ~/catkin_ws/src/my_table_description/scripts/move_sequence_rrt.py
6. X√°c nh·∫≠n k·∫øt qu·∫£ tr√™n RViz
M·ªü Displays ‚Üí Planning Scene ‚Üí b·∫≠t

M·ªü Displays ‚Üí Object Colors ‚Üí b·∫≠t

Quan s√°t:

Mesh b√†n xu·∫•t hi·ªán t·∫°i (-0.4, 2.20, 0.04) v·ªõi scale (0.2,0.2,0.2)

B√†n hi·ªÉn th·ªã m√†u gray

19 h·ªôp obstacles quanh robot

Robot l·∫≠p k·∫ø ho·∫°ch v√† di chuy·ªÉn n√© v·∫≠t theo sequence

7. T√≥m t·∫Øt c√°c l·ªói ƒë√£ g·∫∑p v√† c√°ch kh·∫Øc ph·ª•c
L·ªói ImportError khi import ColorRGBA

Bi·ªÉu hi·ªán: Khi ch·∫°y script, th√¥ng b√°o ‚Äúcannot import name ‚ÄòColorRGBA‚Äô from ‚Äògeometry_msgs.msg‚Äô‚Äù.

Nguy√™n nh√¢n: ColorRGBA kh√¥ng n·∫±m trong package geometry_msgs, n√≥ thu·ªôc std_msgs.

Kh·∫Øc ph·ª•c: Thay d√≤ng

python
from geometry_msgs.msg import ColorRGBA
th√†nh

python
from std_msgs.msg import ColorRGBA
L·ªói AttributeError v·ªõi _pub_planning_scene_diff

Bi·ªÉu hi·ªán: ‚Äú'PlanningSceneInterface' object has no attribute '_pub_planning_scene_diff'‚Äù khi g·ªçi scene._pub_planning_scene_diff.publish(...).

Nguy√™n nh√¢n: API PlanningSceneInterface ƒë√£ thay ƒë·ªïi, publisher n·ªôi b·ªô kh√¥ng c√≤n expose.

Kh·∫Øc ph·ª•c: T·∫°o publisher th·ªß c√¥ng l√™n topic planning_scene (ho·∫∑c namespace t∆∞∆°ng ·ª©ng), v√≠ d·ª•:

python
pub = rospy.Publisher(f"{ns}/planning_scene", PlanningScene, queue_size=1)
rospy.sleep(0.5)
pub.publish(planning_scene_diff)
B√†n v·∫´n hi·ªÉn th·ªã m√†u xanh l√° thay v√¨ m√†u ƒë√£ ƒë·ªãnh

Bi·ªÉu hi·ªán: D√π publish ObjectColor, b√†n v·∫´n gi·ªØ m√†u m·∫∑c ƒë·ªãnh.

Nguy√™n nh√¢n: Diff color ƒë∆∞·ª£c publish l√™n topic /planning_scene, trong khi MoveIt instance c·ªßa b·∫°n l·∫Øng nghe /dsr01m1013/planning_scene.

Kh·∫Øc ph·ª•c: ƒê·∫£m b·∫£o publisher s·ª≠ d·ª•ng ƒë√∫ng namespace c·ªßa MoveIt, v√≠ d·ª•

python
pub = rospy.Publisher("/dsr01m1013/planning_scene", PlanningScene, queue_size=1)
L·ªói RuntimeError: invalid robot model

Bi·ªÉu hi·ªán: Khi kh·ªüi t·∫°o RobotCommander, th√¥ng b√°o ‚ÄúRobot model parameter not found! Did you remap 'robot_description'?‚Äù v√† ‚Äúinvalid robot model‚Äù.

Nguy√™n nh√¢n: Tham s·ªë robot_description ch∆∞a ƒë∆∞·ª£c load v√†o Parameter Server tr∆∞·ªõc khi g·ªçi moveit_commander.

Kh·∫Øc ph·ª•c:

Ch·∫°y script sau khi ƒë√£ kh·ªüi launch file MoveIt (ƒë√£ load URDF v√†o /robot_description).

N·∫øu mu·ªën ch·∫°y ƒë·ªôc l·∫≠p, trong code th√™m:

python
urdf = open(path_to_urdf).read()
rospy.set_param("/dsr01m1013/robot_description", urdf)
tr∆∞·ªõc khi g·ªçi moveit_commander.roscpp_initialize(...).